exports[`test Menu changes the value when an option is selected 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <DropDownMenu
    anchorOrigin={
        Object {
            "horizontal": "left",
            "vertical": "top",
          }
    }
    animated={true}
    autoWidth={true}
    disabled={false}
    iconButton={<NavigationArrowDropDown />}
    maxHeight={500}
    multiple={false}
    onChange={[Function]}
    openImmediately={false}
    value="he">
    <MenuItem
        anchorOrigin={
            Object {
                "horizontal": "right",
                "vertical": "top",
              }
        }
        checked={false}
        desktop={false}
        disabled={false}
        focusState="none"
        insetChildren={false}
        primaryText="עברית"
        value="he" />
    <MenuItem
        anchorOrigin={
            Object {
                "horizontal": "right",
                "vertical": "top",
              }
        }
        checked={false}
        desktop={false}
        disabled={false}
        focusState="none"
        insetChildren={false}
        primaryText="English"
        value="en" />
</DropDownMenu>,
  "nodes": Array [
    <DropDownMenu
      anchorOrigin={
            Object {
                  "horizontal": "left",
                  "vertical": "top",
                }
      }
      animated={true}
      autoWidth={true}
      disabled={false}
      iconButton={<NavigationArrowDropDown />}
      maxHeight={500}
      multiple={false}
      onChange={[Function]}
      openImmediately={false}
      value="he">
      <MenuItem
            anchorOrigin={
                  Object {
                        "horizontal": "right",
                        "vertical": "top",
                      }
            }
            checked={false}
            desktop={false}
            disabled={false}
            focusState="none"
            insetChildren={false}
            primaryText="עברית"
            value="he" />
      <MenuItem
            anchorOrigin={
                  Object {
                        "horizontal": "right",
                        "vertical": "top",
                      }
            }
            checked={false}
            desktop={false}
            disabled={false}
            focusState="none"
            insetChildren={false}
            primaryText="English"
            value="en" />
</DropDownMenu>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <LocalesMenu
        locales={
                Array [
                        Object {
                          "primaryText": "עברית",
                          "shortText": "he",
                        },
                        Object {
                          "primaryText": "English",
                          "shortText": "en",
                        },
                      ]
        }
        sLocale="he"
        setLocamle={[Function]} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LocalesMenu {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleChange": [Function],
        "props": Object {
          "locales": Array [
            Object {
              "primaryText": "עברית",
              "shortText": "he",
            },
            Object {
              "primaryText": "English",
              "shortText": "en",
            },
          ],
          "sLocale": "he",
          "setLocamle": [Function],
        },
        "refs": Object {},
        "state": Object {
          "value": "he",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <DropDownMenu
          anchorOrigin={
                    Object {
                              "horizontal": "left",
                              "vertical": "top",
                            }
          }
          animated={true}
          autoWidth={true}
          disabled={false}
          iconButton={<NavigationArrowDropDown />}
          maxHeight={500}
          multiple={false}
          onChange={[Function]}
          openImmediately={false}
          value="he">
          <MenuItem
                    anchorOrigin={
                              Object {
                                        "horizontal": "right",
                                        "vertical": "top",
                                      }
                    }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="עברית"
                    value="he" />
          <MenuItem
                    anchorOrigin={
                              Object {
                                        "horizontal": "right",
                                        "vertical": "top",
                                      }
                    }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="English"
                    value="en" />
</DropDownMenu>,
        "_debugID": 2,
        "_renderedOutput": <DropDownMenu
          anchorOrigin={
                    Object {
                              "horizontal": "left",
                              "vertical": "top",
                            }
          }
          animated={true}
          autoWidth={true}
          disabled={false}
          iconButton={<NavigationArrowDropDown />}
          maxHeight={500}
          multiple={false}
          onChange={[Function]}
          openImmediately={false}
          value="he">
          <MenuItem
                    anchorOrigin={
                              Object {
                                        "horizontal": "right",
                                        "vertical": "top",
                                      }
                    }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="עברית"
                    value="he" />
          <MenuItem
                    anchorOrigin={
                              Object {
                                        "horizontal": "right",
                                        "vertical": "top",
                                      }
                    }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="English"
                    value="en" />
</DropDownMenu>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <LocalesMenu
    locales={
        Array [
            Object {
              "primaryText": "עברית",
              "shortText": "he",
            },
            Object {
              "primaryText": "English",
              "shortText": "en",
            },
          ]
    }
    sLocale="he"
    setLocamle={[Function]} />,
}
`;
